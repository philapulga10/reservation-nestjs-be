// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings        Booking[]
  rewardHistories RewardHistory[]
  adminLogs       AdminLog[]
}

model Hotel {
  id       String @id @default(cuid())
  name     String
  location String
  price    Float
  rating   Float
  image    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]
}

model Booking {
  id         String @id @default(cuid())
  userId     String
  userEmail  String
  hotelId    String
  hotelName  String
  numDays    Int
  numRooms   Int
  totalPrice Float
  isCancelled Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  hotel Hotel @relation(fields: [hotelId], references: [id])
}

model AuditLog {
  id             String @id @default(cuid())
  userEmail      String?
  action         String
  collectionName String
  objectId       String
  before         Json?
  after          Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model AdminLog {
  id       String @id @default(cuid())
  adminId  String?
  action   String
  metadata Json   @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  admin User? @relation(fields: [adminId], references: [id])
}

model RewardHistory {
  id     String @id @default(cuid())
  userId String
  date   DateTime @default(now())
  points Int
  reason String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
} 